#+title: libsigscan
#+options: toc:nil
#+startup: showeverything
#+author: 8dcc

*C library for signature scanning on Linux.*

#+TOC: headlines 2

* Description

This library is for signature scanning. For more information on how it works,
check out my [[https://8dcc.github.io/programming/signature-scanning.html][Signature scanning in C]] blog entry.

It only supports linux, since it parses the =/proc/self/maps= file to get the
start and end addresses of the loaded modules.

* Building the example

If you want to use this library, simply copy the detour source and headers to
your project, include the header in your source files and compile the detour
source with the rest of your code. Please see [[https://github.com/8dcc/libsigscan/blob/main/src/main.c][src/main.c]] and the /Usage/ section
for an example on how to use it.

#+begin_src console
$ git clone https://github.com/8dcc/libsigscan
$ cd libsigscan
$ make
...
#+end_src

* Usage

The library consists of just 2 functions: =sigscan_module()= and =sigscan()=, which
is just a wrapper.

For a full example, see [[https://github.com/8dcc/libsigscan/blob/main/src/main.c][src/main.c]].

** =sigscan_module=

This function scans all the memory blocks whose name matches the =module=
parameter. The function matches the last column in =/proc/self/maps= *literally*, so
use absolute paths.

#+begin_src C
#include "libsigscan.h"

#define MODULE    "/usr/lib/libc.so.6"
#define SIGNATURE "DE AD BE EF ? ? CA FE"

/* Search only in this module. */
void* match = sigscan_module(MODULE, SIGNATURE);
#+end_src

** =sigscan=

This function scans the whole memory being used by the process (except the
regions that start with ='['= in =/proc/self/maps=, like heap, stack, etc.).

Calling this function is the same as passing =NULL= as the first parameter of
=sigscan_module=.

#+begin_src C
#include "libsigscan.h"

#define SIGNATURE "DE AD BE EF ? ? CA FE"

/* Look for those bytes in all loaded modules. */
void* match = sigscan(SIGNATURE);
#+end_src
