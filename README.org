#+title: libsigscan
#+options: toc:nil
#+startup: showeverything
#+author: 8dcc

*Single-header C library for signature scanning on Linux.*

#+TOC: headlines 2

* Description

This library is for matching byte patterns (signatures) in the memory of a
process. By default, this library only scans the *current* process, but there is
an [[https://github.com/8dcc/libsigscan/tree/external-scanning][=external-scanning= branch]] that is able to read external memory using
=process_vm_readv=.

It only supports linux, since it parses the =/proc/PID/maps= file to get the start
and end addresses of the loaded modules.

The library asumes all signatures are in [[https://hex-rays.com/ida-pro/][IDA]] (=DE AD ? EF=) or [[https://x64dbg.com/][x64Dbg]]
(=DE AD ?? EF=) format. See also the [[https://github.com/ajkhoury/SigMaker-x64][sigmaker]] plugin.

For more information on signature scanning and on how this library works, check
out my [[https://8dcc.github.io/programming/signature-scanning.html][Signature scanning in C]] blog entry.

* Building the example

To try the example, simply clone the repository, compile it, and run
=libsigscan-test.out=. Please see [[https://github.com/8dcc/libsigscan/blob/main/src/main.c][src/main.c]] and the /Usage/ section for an example
on how to use it.

#+begin_src console
$ git clone https://github.com/8dcc/libsigscan
$ cd libsigscan
$ make
$ ./libsigscan-test.out
#+end_src

* Usage

Since this is a simple single-header library, you just need to copy the
=libsigscan.h= file and =#include= it on your sources.

For a full example, see [[https://github.com/8dcc/libsigscan/blob/main/src/main.c][src/main.c]].

The library consists of just 2 functions: =sigscan_module()= and =sigscan()=.

** =sigscan_module()=

This function scans all the memory blocks whose name matches the =regex=
parameter. It uses the [[https://www.gnu.org/software/sed/manual/html_node/ERE-syntax.html][Extended Regular Expression]] (ERE) syntax, so keep that in
mind before escaping certain characters like =+=, =?=, etc. See also [[https://www.gnu.org/software/sed/manual/html_node/BRE-vs-ERE.html][BRE vs. ERE]].

#+begin_src C
#include "libsigscan.h"

#define MODULE_REGEX ".+/libc\\.so\\.6"
#define SIGNATURE    "DE AD BE EF ? ? CA FE"

/* Search only in this module. */
void* match = sigscan_module(MODULE_REGEX, SIGNATURE);
#+end_src

** =sigscan()=

This function scans the whole memory being used by the process (except the
regions that start with =[= in =/proc/PID/maps=, like heap, stack, etc.). Keep in
mind that depending on the memory being used by the process, it might take a few
seconds, so it's better to filter the module name whenever possible.

This function is just a wrapper, and calling it is the same as passing =NULL= as
the first parameter to =sigscan_module=.

#+begin_src C
#include "libsigscan.h"

#define SIGNATURE "DE AD BE EF ? ? CA FE"

/* Look for those bytes in all loaded modules. */
void* match = sigscan(SIGNATURE);
#+end_src
